const对象创建后其值就不能再改变.
_______________________________
const对象必须初始化!!

int i, *const cp;       // illegal, cp must initialize.
int *p1, *const p2;     // illegal, p2 must initialize.
const int ic, &r = ic;  // illegal, ic must initialize.
const int *const p3;    // illegal, p3 must initialize.
const int *p;           // legal. a pointer to const int. p是指向常量的指针 指针不用初始化.
_______________________________
默认状态下,const对象仅在文件内有效.如果想在多个文件之间共享const对象,必须在变量的定义之前加extern关键字.

const的引用,对常量的引用.  不能被用作修改它所绑定的对象.
    const int ci = 1024;
    const int &r1 = ci; //正确
    r1 = 42;        //错误,r1是对常亮的引用
    int &r2 = ci;   //错误,试图让一个非常量引用指向一个常量对象.
    
    int i = 42;
    const int &r1 = i; //允许将const int &绑定到一个普通的int对象上
    int &r2 = r1 * 2; //错误:r2是一个普通的非常量引用.
    const引用->int可以
    int引用->const不可以
    
    const int &r2 = i;
    r2绑定(非常量整数)i是合法的行为.然而,不允许通过r2修改i的值.尽管如此,i的值仍然允许通过其他途径修改.
    
const指针
    必须初始化,记得从右向左阅读
    int errNumb = 0;
    int *const curErr = &errNumb;   //*放在const之前说明指针是一个常量,不变的是指针的本身而非指向指针的值.!!
    
顶层const:指针本身是常量
底层const:表示指针所指对象是常量

常量表达式
const int a = 20;       //是
const int b = a + 1;    //是
int c = 21;             //不是
const int d = getsize();//不是,尽管d本身是一个常量,但它的具体值直到运行时才能获取到,所以也不是常量表达式.

constexpr变量
将变量声明成constexpr类型以便由编译器来验证变量的值是否是一个常量表达式.
constexpr int sz = size();  //只有当size是一个constexpr函数时才是一条正确的声明语句

字面值类型:包括但不限于:算数类型 引用 指针...
非字面值类型:包括但不限于:IO string...
constecpr指针初始化值必须是nullptr或0,或是存储于某个固定地址中的对象.
